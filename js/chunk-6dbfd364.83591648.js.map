{"version":3,"sources":["webpack:///./src/views/Health.vue?6906","webpack:///src/views/Health.vue","webpack:///./src/views/Health.vue?8587","webpack:///./src/views/Health.vue?9720","webpack:///./src/views/Health.vue?4657","webpack:///./src/views/Health.vue?f508"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","staticStyle","_v","attrs","_m","staticRenderFns","name","components","methods","map","dayslider","document","getElementById","days","innerHTML","value","oninput","start","Date","end","numberOfDays","timeScale","date_format","promises","files","forEach","Promise","all","then","values","world","data","radius","checkdate","x","date","filter","Map","svg1","width","height","projection","path","legend","getvalue","invert","getdate","selectAll","remove","bar","reset","top10","top20","top30","current","sortMode","filterMode","xAxis","yAxis","margin","svg","y","delay","i","mode","JSON","parse","stringify","sort","domain","toggleSort","id","toggleFilter","toggleReset","redraw","bars","exit","transition","duration","style","draw","append","attr","call","console","log","location","d","total_cases","total_deaths","GDP","choose","option","addEventListener","map2","color","interpolator","Object","assign","ticks","undefined","tickValues","tickFormat","node","push","clickname","clickdata","title","svg2","pie","labels","colors","svg3","label","div","pie_format","arcs","g","line","svg4","checkname","all_val","data_now","mounted","component"],"mappings":"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","file":"js/chunk-6dbfd364.83591648.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"health\"},[_c('hr',{staticStyle:{\"margin-top\":\"30px\"}}),_c('h3',[_vm._v(\"The Cumulative Covid-19 Confirmed Global Map 2020 - 2021\")]),_c('h4',{attrs:{\"id\":\"slider_h4\"}},[_vm._v(\" From 2020-03-01 to 2021-11-02 (included 2021-11-01) (611 days) \")]),_vm._m(0),_c('svg',{staticStyle:{\"height\":\"700px\",\"width\":\"1200px\"},attrs:{\"id\":\"proportionalmap\"}}),_c('hr',{staticStyle:{\"margin-top\":\"30px\"}}),_c('h3',[_vm._v(\"The Cumulative Covid-19 Bar chart 2020 - 2021 (Confirmed or Deaths)\")]),_vm._m(1),_vm._m(2),_vm._m(3),_c('div',{attrs:{\"id\":\"barchart\"}},[_c('svg',{staticStyle:{\"height\":\"500px\",\"width\":\"1200px\"},attrs:{\"id\":\"barchartsvg\"}})]),_c('hr',{staticStyle:{\"margin-top\":\"30px\"}}),_c('h3',[_vm._v(\"The Cumulative Covid-19 Vaccinated Global Map 2021\")]),_c('h4',[_vm._v(\" Please click the area of a country on the map to get the details of people vaccinated and confirmed. \")]),_c('div',{staticClass:\"container\",staticStyle:{\"margin-top\":\"-20px\"}},[_c('div',{staticClass:\"row\",staticStyle:{\"height\":\"100%\",\"width\":\"110%\",\"margin-right\":\"-20%\"}},[_c('div',{staticClass:\"col-md-7\"},[_c('svg',{staticStyle:{\"height\":\"130%\",\"width\":\"130%\",\"margin-top\":\"20%\",\"margin-right\":\"0%\",\"margin-left\":\"-30%\"},attrs:{\"id\":\"chloroplethmap\"}})]),_c('div',{staticClass:\"col-md-5\"},[_c('svg',{staticStyle:{\"height\":\"100%\",\"width\":\"100%\",\"margin-top\":\"0%\",\"margin-right\":\"-80%\",\"margin-left\":\"0%\"},attrs:{\"id\":\"piechart\"}}),_c('svg',{staticStyle:{\"width\":\"124%\",\"height\":\"100%\",\"margin-top\":\"-50%\",\"margin-left\":\"-20%\"},attrs:{\"id\":\"linechart\"}})])])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dayslider\"},[_c('input',{staticStyle:{\"width\":\"611px\"},attrs:{\"id\":\"slider\",\"type\":\"range\",\"min\":\"1\",\"max\":\"611\",\"value\":\"611\",\"step\":\"1\"}}),_c('span',{attrs:{\"id\":\"range\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"commands\"},[_c('select',{attrs:{\"id\":\"type\"}},[_c('option',{attrs:{\"value\":\"cases\"}},[_vm._v(\"Total Confirmed Cases\")]),_c('option',{attrs:{\"value\":\"deaths\"}},[_vm._v(\"Total Deaths\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"commands\"},[_c('span',{staticClass:\"filter\",attrs:{\"id\":\"reset\"}},[_vm._v(\"Reset\")]),_c('span',{staticClass:\"filter\",attrs:{\"id\":\"top10\"}},[_vm._v(\"Filter top 10 by value\")]),_c('span',{staticClass:\"filter\",attrs:{\"id\":\"top20\"}},[_vm._v(\"Filter top 10 to 20 by value\")]),_c('span',{staticClass:\"filter\",attrs:{\"id\":\"top30\"}},[_vm._v(\"Filter top 20 to 30 by value\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"commands\"},[_c('span',{staticClass:\"sort\",attrs:{\"id\":\"name\"}},[_vm._v(\"Order alphabetic by name\")]),_c('span',{staticClass:\"sort\",attrs:{\"id\":\"asvalue\"}},[_vm._v(\"Order ascending by value\")]),_c('span',{staticClass:\"sort\",attrs:{\"id\":\"desvalue\"}},[_vm._v(\"Order descending by value\")]),_c('span',{staticClass:\"sort\",attrs:{\"id\":\"asgdp\"}},[_vm._v(\"Order ascending by GDP\")])])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"health\">\r\n    <hr style=\"margin-top: 30px\" />\r\n\r\n    <h3>The Cumulative Covid-19 Confirmed Global Map 2020 - 2021</h3>\r\n    <h4 id=\"slider_h4\">\r\n      From 2020-03-01 to 2021-11-02 (included 2021-11-01) (611 days)\r\n    </h4>\r\n\r\n    <div class=\"dayslider\">\r\n      <input\r\n        id=\"slider\"\r\n        style=\"width: 611px\"\r\n        type=\"range\"\r\n        min=\"1\"\r\n        max=\"611\"\r\n        value=\"611\"\r\n        step=\"1\"\r\n      />\r\n      <span id=\"range\"></span>\r\n    </div>\r\n    <svg id=\"proportionalmap\" style=\"height: 700px; width: 1200px\"></svg>\r\n\r\n    <hr style=\"margin-top: 30px\" />\r\n\r\n    <h3>The Cumulative Covid-19 Bar chart 2020 - 2021 (Confirmed or Deaths)</h3>\r\n\r\n    <div class=\"commands\">\r\n      <select id=\"type\">\r\n        <option value=\"cases\">Total Confirmed Cases</option>\r\n        <option value=\"deaths\">Total Deaths</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"commands\">\r\n      <span class=\"filter\" id=\"reset\">Reset</span>\r\n      <span class=\"filter\" id=\"top10\">Filter top 10 by value</span>\r\n      <span class=\"filter\" id=\"top20\">Filter top 10 to 20 by value</span>\r\n      <span class=\"filter\" id=\"top30\">Filter top 20 to 30 by value</span>\r\n    </div>\r\n\r\n    <div class=\"commands\">\r\n      <span class=\"sort\" id=\"name\">Order alphabetic by name</span>\r\n      <span class=\"sort\" id=\"asvalue\">Order ascending by value</span>\r\n      <span class=\"sort\" id=\"desvalue\">Order descending by value</span>\r\n      <span class=\"sort\" id=\"asgdp\">Order ascending by GDP</span>\r\n    </div>\r\n\r\n    <div id=\"barchart\">\r\n      <svg id=\"barchartsvg\" style=\"height: 500px; width: 1200px\"></svg>\r\n    </div>\r\n\r\n    <hr style=\"margin-top: 30px\" />\r\n\r\n    <h3>The Cumulative Covid-19 Vaccinated Global Map 2021</h3>\r\n    <h4>\r\n      Please click the area of a country on the map to get the details of people\r\n      vaccinated and confirmed.\r\n    </h4>\r\n    <div class=\"container\" style=\"margin-top: -20px\">\r\n      <div class=\"row\" style=\"height: 100%; width: 110%; margin-right: -20%\">\r\n        <div class=\"col-md-7\">\r\n          <svg\r\n            id=\"chloroplethmap\"\r\n            style=\"\r\n              height: 130%;\r\n              width: 130%;\r\n              margin-top: 20%;\r\n              margin-right: 0%;\r\n              margin-left: -30%;\r\n            \"\r\n          ></svg>\r\n        </div>\r\n        <div class=\"col-md-5\">\r\n          <svg\r\n            id=\"piechart\"\r\n            style=\"\r\n              height: 100%;\r\n              width: 100%;\r\n              margin-top: 0%;\r\n              margin-right: -80%;\r\n              margin-left: 0%;\r\n            \"\r\n          ></svg>\r\n          <svg\r\n            id=\"linechart\"\r\n            style=\"\r\n              width: 124%;\r\n              height: 100%;\r\n              margin-top: -50%;\r\n              margin-left: -20%;\r\n            \"\r\n          ></svg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from \"d3\";\r\nconst topojson = require(\"topojson\");\r\nexport default {\r\n  name: \"Health\",\r\n  components: {},\r\n  // data: function () {\r\n  //   return {\r\n  //     geodata: undefined,\r\n  //   };\r\n  // },\r\n  methods: {\r\n    map() {\r\n      var dayslider = document.getElementById(\"slider\");\r\n      var days = document.getElementById(\"range\");\r\n      days.innerHTML = dayslider.value + \"days\";\r\n      dayslider.oninput = function () {\r\n        days.innerHTML = this.value + \"days\";\r\n      };\r\n\r\n      var start = new Date(\"2020/03/01\");\r\n      //console.log(start);\r\n      var end = new Date(\"2021/11/02\");\r\n      //console.log(end);\r\n\r\n      var numberOfDays = d3.timeDay.count(start, end);\r\n      //console.log(numberOfDays)\r\n      var timeScale = d3\r\n        .scaleTime()\r\n        .domain([start, end])\r\n        .range([0, numberOfDays]);\r\n      var date_format = d3.timeFormat(\"%Y/%m/%d\");\r\n      d3.select(\"#slider_h4\").text(\r\n        `From ${date_format(timeScale.invert(1))} to ${date_format(\r\n          timeScale.invert(numberOfDays)\r\n        )} (included 2021-11-01) (${numberOfDays} days)`\r\n      );\r\n\r\n      var promises = [];\r\n      var files = [\"healthcountries-110m.json\", \"confirm_death.json\"];\r\n      files.forEach((url) => promises.push(d3.json(url))); //For each item in the 'files' array, load the json file by using promises.\r\n      Promise.all(promises).then(function (values) {\r\n        //the Promise.all takes all the promises and return a single promise.\r\n        var world = values[0];\r\n        var data = values[1];\r\n        //   var format = d3.format(',.0f')\r\n        //   console.log(format)\r\n        //size circles by area with the specified domain and range, and we quantile the value scale\r\n        var radius = d3.scaleSqrt([0, 46100496], [0, 60]);\r\n        function checkdate(x) {\r\n          return x.date == \"2021/11/02\";\r\n        }\r\n        data = data.filter(checkdate);\r\n        data = new Map(data.map((d1) => [d1.location, +d1.total_cases]));\r\n\r\n        var svg1 = d3\r\n          .select(\"#proportionalmap\")\r\n          .attr(\"viewBox\", [30, 100, 950, 360]);\r\n\r\n        var width = 800;\r\n        var height = 800;\r\n        svg1\r\n          .append(\"text\")\r\n          .attr(\"x\", 80)\r\n          .attr(\"y\", 15)\r\n          .attr(\"fill\", \"red\")\r\n          .style(\"font-size\", \"1em\")\r\n          .text(`The date is: 2021/11/02`);\r\n        var projection = d3\r\n          .geoMercator()\r\n          .fitSize(\r\n            [width, height],\r\n            topojson.feature(world, world.objects.land)\r\n          );\r\n        var path = d3.geoPath().projection(projection);\r\n        //add the path (geoPath) for the all converted us.objects.nation (all states) data from TopoJSON to GeoJSON\r\n        //set the filled color and the 'd' attribute with the created path generator\r\n        svg1\r\n          .append(\"path\")\r\n          .datum(topojson.feature(world, world.objects.land))\r\n          .attr(\"fill\", \"#ccc\")\r\n          .attr(\"d\", path);\r\n        //add the path (geoPath) for the produced mesh of interior boundaries for all states to the svg\r\n        //set the filled white color, the stroke attribute, the stroke-linejoin attribute and the 'd' attribute with the created path generator\r\n        svg1\r\n          .append(\"path\")\r\n          .datum(\r\n            topojson.mesh(world, world.objects.countries, (a, b) => a !== b)\r\n          )\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"black\")\r\n          .attr(\"stroke-linejoin\", \"round\")\r\n          .attr(\"d\", path);\r\n        //create and add a legend for the map with circles\r\n        //and set some attributes of the legend\r\n        // add circle and text on the legend\r\n        const legend = svg1\r\n          .append(\"g\")\r\n          .attr(\"fill\", \"black\")\r\n          .attr(\"transform\", \"translate(840,160)\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .style(\"font\", \"16px sans-serif\")\r\n          .selectAll(\"g\")\r\n          .data([0, 1000000, 3000000, 10000000, 30000000, 50000000])\r\n          .join(\"g\");\r\n        legend\r\n          .append(\"circle\")\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"purple\")\r\n          .attr(\"cy\", (d) => -radius(d))\r\n          .attr(\"r\", radius);\r\n        legend\r\n          .append(\"text\")\r\n          .attr(\"y\", (d) => -2 * radius(d))\r\n          .attr(\"dy\", \"1.2em\")\r\n          .text(d3.format(\".1s\"));\r\n        //console.log(topojson.feature(world, world.objects.countries).features)\r\n        //draw and append the blue circles in the map with title\r\n        svg1\r\n          .append(\"g\")\r\n          .attr(\"fill\", \"purple\")\r\n          .attr(\"fill-opacity\", 0.5)\r\n          .attr(\"stroke\", \"#fff\")\r\n          .attr(\"stroke-width\", 0.5)\r\n          .selectAll(\"circle\")\r\n          .data(\r\n            topojson\r\n              .feature(world, world.objects.countries)\r\n              .features.map((d) => ((d.value = data.get(d.properties.name)), d)) //create a map with the data id and the data value for the selected circle\r\n              .sort((a, b) => b.value - a.value)\r\n          )\r\n          .join(\"circle\")\r\n          .attr(\"transform\", (d) => `translate(${path.centroid(d)})`) //set the position of circles to be near the centroid of their corresponded path\r\n          .attr(\"r\", (d) => radius(d.value))\r\n          .append(\"title\")\r\n          .text((d) => `${d.properties.name}, ${data.get(d.properties.name)}`); //set the text of the added title (set the tooltip);\r\n      });\r\n      d3.selectAll(\"input\").on(\"change\", function change() {\r\n        var getvalue = this.value;\r\n        var date = timeScale.invert(getvalue);\r\n        //console.log(date)\r\n        var getdate = d3.timeFormat(\"%Y/%m/%d\")(date);\r\n        //console.log(getdate)\r\n        var svg1 = d3\r\n          .select(\"#proportionalmap\")\r\n          .attr(\"viewBox\", [30, 100, 950, 360]);\r\n        svg1.selectAll(\"text\").remove();\r\n        svg1\r\n          .append(\"text\")\r\n          .attr(\"x\", 80)\r\n          .attr(\"y\", 15)\r\n          .attr(\"fill\", \"red\")\r\n          .style(\"font-size\", \"1em\")\r\n          .text(`The date is: ${getdate}`);\r\n        Promise.all(promises).then(function (values) {\r\n          //the Promise.all takes all the promises and return a single promise.\r\n          var world = values[0];\r\n          var data = values[1];\r\n\r\n          var width = 800;\r\n          var height = 800;\r\n          var projection = d3\r\n            .geoMercator()\r\n            .fitSize(\r\n              [width, height],\r\n              topojson.feature(world, world.objects.land)\r\n            );\r\n          var path = d3.geoPath().projection(projection);\r\n          //size circles by area with the specified domain and range, and we quantile the value scale\r\n          var radius = d3.scaleSqrt([0, 46100496], [0, 60]);\r\n          //find the matched data as the input date\r\n          function checkdate(x) {\r\n            return x.date == getdate;\r\n          }\r\n          data = data.filter(checkdate);\r\n          //console.log(data)\r\n          data = new Map(data.map((d1) => [d1.location, +d1.total_cases]));\r\n          var svg1 = d3.select(\"#proportionalmap\");\r\n          svg1.selectAll(\"circle\").remove();\r\n\r\n          const legend = svg1\r\n            .append(\"g\")\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"transform\", \"translate(840,160)\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font\", \"16px sans-serif\")\r\n            .selectAll(\"g\")\r\n            .data([0, 1000000, 3000000, 10000000, 30000000, 50000000])\r\n            .join(\"g\");\r\n          legend\r\n            .append(\"circle\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"purple\")\r\n            .attr(\"cy\", (d) => -radius(d))\r\n            .attr(\"r\", radius);\r\n          legend\r\n            .append(\"text\")\r\n            .attr(\"y\", (d) => -2 * radius(d))\r\n            .attr(\"dy\", \"1.2em\")\r\n            .text(d3.format(\".1s\"));\r\n          //console.log(topojson.feature(world, world.objects.countries).features)\r\n          //draw and append the blue circles in the map with title\r\n          svg1\r\n            .append(\"g\")\r\n            .attr(\"fill\", \"purple\")\r\n            .attr(\"fill-opacity\", 0.5)\r\n            .attr(\"stroke\", \"#fff\")\r\n            .attr(\"stroke-width\", 0.5)\r\n            .selectAll(\"circle\")\r\n            //.remove()\r\n            .data(\r\n              topojson\r\n                .feature(world, world.objects.countries)\r\n                .features.map(\r\n                  (d) => ((d.value = data.get(d.properties.name)), d)\r\n                ) //create a map with the data id and the data value for the selected circle\r\n                .sort((a, b) => b.value - a.value)\r\n            )\r\n            .join(\"circle\")\r\n            .attr(\"transform\", (d) => `translate(${path.centroid(d)})`) //set the position of circles to be near the centroid of their corresponded path\r\n            .attr(\"r\", (d) => radius(d.value))\r\n            .append(\"title\")\r\n            .text(\r\n              (d) => `${d.properties.name}, ${data.get(d.properties.name)}`\r\n            ); //set the text of the added title (set the tooltip)\r\n        });\r\n      });\r\n    },\r\n    bar() {\r\n      var margin = { top: 50, left: 100, bottom: 50, right: 50 },\r\n        width = 1200 - margin.left - margin.right,\r\n        height = 500 - margin.top - margin.bottom;\r\n      var svg = d3\r\n        .select(\"#barchartsvg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n        .attr(\r\n          \"transform\",\r\n          \"translate(\" + margin.left + \", \" + margin.top + \")\"\r\n        );\r\n      var x = d3.scaleBand();\r\n      var y = d3.scaleLinear();\r\n      var delay = function (d, i) {\r\n        return i * 50;\r\n      };\r\n      var reset, top10, top20, top30;\r\n      var current, sortMode, filterMode;\r\n      var xAxis, yAxis;\r\n      d3.json(\"total.json\", (d) => {\r\n        console.log(\"load data\");\r\n        return {\r\n          location: d.location,\r\n          total_cases: +d.total_cases,\r\n          total_deaths: +d.total_deaths,\r\n          GDP: +d.GDP,\r\n        };\r\n      }).then((data) => {\r\n        function checkdate(x) {\r\n          return x.date == \"2021-11-01\";\r\n        }\r\n        data = data.filter(checkdate);\r\n        //console.log(data)\r\n        function choose() {\r\n          var option = document.getElementById(\"type\").value;\r\n          if (option == \"cases\") {\r\n            top10 = data\r\n              .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n              .slice(0, 10);\r\n            //console.log('this is top:')\r\n            //console.log(top10)\r\n            top20 = data\r\n              .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n              .slice(10, 20);\r\n            //console.log(bottom10)\r\n            top30 = data\r\n              .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n              .slice(20, 30);\r\n          }\r\n          if (option == \"deaths\") {\r\n            top10 = data\r\n              .sort((a, b) => d3.descending(a.total_deaths, b.total_deaths))\r\n              .slice(0, 10);\r\n            //console.log('this is top:')\r\n            //console.log(top10)\r\n            top20 = data\r\n              .sort((a, b) => d3.descending(a.total_deaths, b.total_deaths))\r\n              .slice(10, 20);\r\n            //console.log(bottom10)\r\n            top30 = data\r\n              .sort((a, b) => d3.descending(a.total_deaths, b.total_deaths))\r\n              .slice(20, 30);\r\n          }\r\n          filter(filterMode);\r\n          sort(sortMode);\r\n          redraw();\r\n        }\r\n        document.getElementById(\"type\").addEventListener(\"change\", choose);\r\n        reset = data\r\n          .sort((a, b) => d3.ascending(a.location, b.location))\r\n          .slice(0, 10);\r\n        //console.log(JSON.stringify(reset));\r\n        top10 = data\r\n          .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n          .slice(0, 10);\r\n        //console.log('this is top:')\r\n        //console.log(top10)\r\n        top20 = data\r\n          .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n          .slice(10, 20);\r\n        //console.log(bottom10)\r\n        top30 = data\r\n          .sort((a, b) => d3.descending(a.total_cases, b.total_cases))\r\n          .slice(20, 30);\r\n        filter(\"#reset\");\r\n        sort(\"#reset\");\r\n        toggleFilter(\"#reset\");\r\n        toggleSort(\"#reset\");\r\n        draw();\r\n      });\r\n      //sort by country name\r\n      d3.select(\"#name\").on(\"click\", () => {\r\n        sort(\"#name\");\r\n        transition();\r\n        toggleSort(\"#name\");\r\n      });\r\n      //sort by value\r\n      d3.select(\"#asvalue\").on(\"click\", () => {\r\n        sort(\"#asvalue\");\r\n        transition();\r\n        toggleSort(\"#asvalue\");\r\n      });\r\n      d3.select(\"#desvalue\").on(\"click\", () => {\r\n        sort(\"#desvalue\");\r\n        transition();\r\n        toggleSort(\"#desvalue\");\r\n      });\r\n      d3.select(\"#asgdp\").on(\"click\", () => {\r\n        sort(\"#asgdp\");\r\n        transition();\r\n        toggleSort(\"#asgdp\");\r\n      });\r\n      ////\r\n      //filter event handlers\r\n      d3.select(\"#top10\").on(\"click\", () => {\r\n        filter(\"#top10\");\r\n        sort(sortMode);\r\n        toggleSort(sortMode);\r\n        toggleFilter(\"#top10\");\r\n        redraw();\r\n      });\r\n      d3.select(\"#top20\").on(\"click\", () => {\r\n        filter(\"#top20\");\r\n        sort(sortMode);\r\n        toggleSort(sortMode);\r\n        toggleFilter(\"#top20\");\r\n        redraw();\r\n      });\r\n      d3.select(\"#top30\").on(\"click\", () => {\r\n        filter(\"#top30\");\r\n        sort(sortMode);\r\n        toggleSort(sortMode);\r\n        toggleFilter(\"#top30\");\r\n        redraw();\r\n      });\r\n      //Reset\r\n      d3.select(\"#reset\").on(\"click\", () => {\r\n        filter(\"#reset\");\r\n        sort(\"#reset\");\r\n        toggleReset(\"#reset\");\r\n        redraw();\r\n      });\r\n      function filter(mode) {\r\n        if (mode === \"#reset\") {\r\n          current = JSON.parse(JSON.stringify(reset));\r\n        } else if (mode === \"#top10\") {\r\n          current = JSON.parse(JSON.stringify(top10));\r\n        } else if (mode === \"#top20\") {\r\n          current = JSON.parse(JSON.stringify(top20));\r\n        } else if (mode === \"#top30\") {\r\n          current = JSON.parse(JSON.stringify(top30));\r\n        }\r\n        filterMode = mode;\r\n      }\r\n      //   console.log(filterMode);\r\n      function sort(mode) {\r\n        if (mode === \"#reset\") {\r\n          current.sort((a, b) => d3.ascending(a.location, b.location));\r\n        } else if (mode === \"#name\") {\r\n          current.sort((a, b) => d3.ascending(a.location, b.location));\r\n        } else if (mode === \"#asvalue\") {\r\n          if (document.getElementById(\"type\").value == \"cases\") {\r\n            current.sort((a, b) => d3.ascending(a.total_cases, b.total_cases));\r\n          } else if (document.getElementById(\"type\").value == \"deaths\") {\r\n            current.sort((a, b) =>\r\n              d3.ascending(a.total_deaths, b.total_deaths)\r\n            );\r\n          }\r\n        } else if (mode === \"#desvalue\") {\r\n          if (document.getElementById(\"type\").value == \"cases\") {\r\n            current.sort((a, b) => d3.descending(a.total_cases, b.total_cases));\r\n          } else if (document.getElementById(\"type\").value == \"deaths\") {\r\n            current.sort((a, b) =>\r\n              d3.descending(a.total_deaths, b.total_deaths)\r\n            );\r\n          }\r\n        } else if (mode === \"#asgdp\") {\r\n          current.sort((a, b) => d3.ascending(a.GDP, b.GDP));\r\n        }\r\n        x.domain(current.map((d) => d.location));\r\n        sortMode = mode;\r\n      }\r\n      function toggleSort(id) {\r\n        d3.selectAll(\".sort\").style(\"background-color\", \"#eee\");\r\n        d3.select(id).style(\"background-color\", \"yellow\");\r\n        d3.select(\"#reset\").style(\"background-color\", \"#eee\");\r\n      }\r\n      function toggleFilter(id) {\r\n        d3.selectAll(\".filter\").style(\"background-color\", \"#eee\");\r\n        d3.select(id).style(\"background-color\", \"lightgreen\");\r\n        d3.select(\"#reset\").style(\"background-color\", \"#eee\");\r\n      }\r\n      function toggleReset(id) {\r\n        d3.selectAll(\".filter\").style(\"background-color\", \"#eee\");\r\n        d3.selectAll(\".sort\").style(\"background-color\", \"#eee\");\r\n        d3.select(id).style(\"background-color\", \"red\");\r\n      }\r\n      ///\r\n      function redraw() {\r\n        //update scale\r\n        x.domain(current.map((d) => d.location))\r\n          .range([0, width])\r\n          .paddingInner(0.2);\r\n        var bars;\r\n        if (document.getElementById(\"type\").value == \"cases\") {\r\n          y.domain([0, d3.max(current, (d) => d.total_cases)]).range([\r\n            height,\r\n            0,\r\n          ]);\r\n          ////////////////////////////////\r\n          // DATA JOIN FOR BARS.\r\n          bars = svg.selectAll(\".bar\").data(current, (d) => d.location);\r\n          // UPDATE.\r\n          bars\r\n            .transition()\r\n            .duration(750)\r\n            .delay(delay)\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"width\", x.bandwidth());\r\n          // ENTER.\r\n          bars\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"y\", y(0))\r\n            .attr(\"width\", x.bandwidth())\r\n            .merge(bars)\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"class\", \"bar\")\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"y\", (d) => y(d.total_cases))\r\n            .attr(\"width\", x.bandwidth())\r\n            .attr(\"height\", (d) => height - y(d.total_cases));\r\n          // EXIT.\r\n          bars.exit().transition().duration(750).style(\"opacity\", 0).remove();\r\n        } else if (document.getElementById(\"type\").value == \"deaths\") {\r\n          y.domain([0, d3.max(current, (d) => d.total_deaths)]).range([\r\n            height,\r\n            0,\r\n          ]);\r\n          ////////////////////////////////\r\n          // DATA JOIN FOR BARS.\r\n          bars = svg.selectAll(\".bar\").data(current, (d) => d.location);\r\n          // UPDATE.\r\n          bars\r\n            .transition()\r\n            .duration(750)\r\n            .delay(delay)\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"width\", x.bandwidth());\r\n          // ENTER.\r\n          bars\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"y\", y(0))\r\n            .attr(\"width\", x.bandwidth())\r\n            .merge(bars)\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"class\", \"bar\")\r\n            .attr(\"x\", (d) => x(d.location))\r\n            .attr(\"y\", (d) => y(d.total_deaths))\r\n            .attr(\"width\", x.bandwidth())\r\n            .attr(\"height\", (d) => height - y(d.total_deaths));\r\n          // EXIT.\r\n          bars.exit().transition().duration(750).style(\"opacity\", 0).remove();\r\n        }\r\n        ////////////////////////////////\r\n        svg\r\n          .selectAll(\"#x-axis\")\r\n          .transition()\r\n          .duration(750)\r\n          .delay(delay)\r\n          .call(xAxis);\r\n\r\n        svg\r\n          .selectAll(\"#y-axis\")\r\n          .transition()\r\n          .duration(750)\r\n          .delay(delay)\r\n          .call(yAxis);\r\n      }\r\n      function transition() {\r\n        var transition = svg.transition().duration(750);\r\n        transition\r\n          .selectAll(\".bar\")\r\n          .delay(delay)\r\n          .attr(\"x\", (d) => x(d.location));\r\n        transition //transition the xaxis\r\n          .select(\"#x-axis\")\r\n          .call(xAxis);\r\n        transition //transition the yaxis\r\n          .select(\"#y-axis\")\r\n          .call(yAxis);\r\n      }\r\n      function draw() {\r\n        //console.log(current.map(d => d.location))\r\n        x.domain(current.map((d) => d.location))\r\n          .range([0, width])\r\n          .paddingInner(0.2);\r\n        y.domain([0, d3.max(current, (d) => d.total_cases)]).range([height, 0]);\r\n        svg\r\n          .selectAll(\".bar\")\r\n          .data(current, (d) => d.location)\r\n          .enter()\r\n          .append(\"rect\")\r\n          .attr(\"class\", \"bar\")\r\n          .attr(\"x\", (d) => x(d.location))\r\n          .attr(\"y\", (d) => y(d.total_cases))\r\n          .attr(\"width\", x.bandwidth())\r\n          .attr(\"height\", (d) => height - y(d.total_cases));\r\n        xAxis = d3.axisBottom().scale(x);\r\n        svg\r\n          .append(\"g\")\r\n          .attr(\"id\", \"x-axis\")\r\n          .attr(\"class\", \"axis\")\r\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n          .call(xAxis);\r\n        yAxis = d3.axisLeft().scale(y).ticks(15, \"d\");\r\n        svg.append(\"g\").attr(\"id\", \"y-axis\").attr(\"class\", \"axis\").call(yAxis);\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"x\", width / 2)\r\n          .attr(\"y\", margin.top * 8.85)\r\n          .attr(\"class\", \"xlabel\")\r\n          .append(\"tspan\")\r\n          .text(\"Country\")\r\n          .style(\"font-size\", \"1.2em\");\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"x\", (-3 * height) / 7)\r\n          .attr(\"y\", -margin.left * 0.8)\r\n          .attr(\"transform\", \"rotate(-90)\")\r\n          .attr(\"class\", \"ylabel\")\r\n          .append(\"tspan\")\r\n          .text(\"Number of People\")\r\n          .style(\"font-size\", \"1.2em\");\r\n      }\r\n    },\r\n    map2() {\r\n      function legend({\r\n        color,\r\n        title,\r\n        tickSize = 6,\r\n        width = 420,\r\n        height = 54 + tickSize,\r\n        marginTop = 18,\r\n        marginRight = 0,\r\n        marginBottom = 16 + tickSize,\r\n        marginLeft = 0,\r\n        ticks = width / 64,\r\n        tickFormat,\r\n        tickValues,\r\n      } = {}) {\r\n        //initialize some variables used in the legend function.\r\n        const svg = d3\r\n          .create(\"svg\")\r\n          .attr(\"width\", width)\r\n          .attr(\"height\", height)\r\n          .attr(\"viewBox\", [0, 0, width, height])\r\n          .style(\"overflow\", \"visible\")\r\n          .style(\"display\", \"block\");\r\n        let x;\r\n        // Continuous\r\n        if (color.interpolator) {\r\n          x = Object.assign(\r\n            color\r\n              .copy()\r\n              .interpolator(\r\n                d3.interpolateRound(marginLeft, width - marginRight)\r\n              ),\r\n            {\r\n              range() {\r\n                return [marginLeft, width - marginRight];\r\n              },\r\n            }\r\n          );\r\n          svg\r\n            .append(\"image\")\r\n            .attr(\"x\", marginLeft)\r\n            .attr(\"y\", marginTop)\r\n            .attr(\"width\", width - marginLeft - marginRight)\r\n            .attr(\"height\", height - marginTop - marginBottom)\r\n            .attr(\"preserveAspectRatio\", \"none\");\r\n          //.attr(\"xlink:href\", ramp(color.interpolator()).toDataURL());\r\n          //scaleSequentialQuantile doesn’t implement ticks or tickFormat.\r\n          if (!x.ticks) {\r\n            if (tickValues === undefined) {\r\n              const n = Math.round(ticks + 1);\r\n              tickValues = d3\r\n                .range(n)\r\n                .map((i) => d3.quantile(color.domain(), i / (n - 1)));\r\n            }\r\n            if (typeof tickFormat !== \"function\") {\r\n              tickFormat = d3.format(\r\n                tickFormat === undefined ? \",f\" : tickFormat\r\n              );\r\n            }\r\n          }\r\n        }\r\n        //discrete\r\n        else if (color.invertExtent) {\r\n          const thresholds = color.thresholds\r\n            ? color.thresholds() // scaleQuantize\r\n            : color.quantiles\r\n            ? color.quantiles() // scaleQuantile\r\n            : color.domain(); // scaleThreshold\r\n          const thresholdFormat =\r\n            tickFormat === undefined\r\n              ? (d) => d\r\n              : typeof tickFormat === \"string\"\r\n              ? d3.format(tickFormat)\r\n              : tickFormat;\r\n          x = d3\r\n            .scaleLinear()\r\n            .domain([-1, color.range().length - 1])\r\n            .rangeRound([marginLeft, width - marginRight]);\r\n          svg\r\n            .append(\"g\")\r\n            .selectAll(\"rect\")\r\n            .data(color.range())\r\n            .join(\"rect\")\r\n            .attr(\"x\", (d, i) => x(i - 1))\r\n            .attr(\"y\", marginTop)\r\n            .attr(\"width\", (d, i) => x(i) - x(i - 1))\r\n            .attr(\"height\", height - marginTop - marginBottom)\r\n            .attr(\"fill\", (d) => d);\r\n          tickValues = d3.range(thresholds.length);\r\n          tickFormat = (i) => thresholdFormat(thresholds[i], i);\r\n        }\r\n        svg\r\n          .append(\"g\")\r\n          .attr(\"transform\", `translate(0, ${height - marginBottom})`)\r\n          .call(\r\n            d3\r\n              .axisBottom(x)\r\n              .ticks(\r\n                ticks,\r\n                typeof tickFormat === \"string\" ? tickFormat : undefined\r\n              )\r\n              .tickFormat(\r\n                typeof tickFormat === \"function\" ? tickFormat : undefined\r\n              )\r\n              .tickSize(tickSize)\r\n              .tickValues(tickValues)\r\n          )\r\n          .call((g) =>\r\n            g\r\n              .selectAll(\".tick line\")\r\n              .attr(\"y1\", marginTop + marginBottom - height)\r\n          )\r\n          .call((g) => g.select(\".domain\").remove())\r\n          .call((g) =>\r\n            g\r\n              .append(\"text\")\r\n              .attr(\"y\", marginTop + marginBottom - height - 6)\r\n              .attr(\"fill\", \"currentColor\")\r\n              .attr(\"text-anchor\", \"start\")\r\n              .attr(\"font-weight\", \"bold\")\r\n              .text(title)\r\n          )\r\n          .style(\"font-size\", \"1.2em\");\r\n        return svg.node();\r\n      }\r\n      /////////////////////////////////////////////////////////////\r\n      //Choropleth code\r\n      var promises = [];\r\n      promises.push(d3.json(\"healthcountries-110m.json\"));\r\n      promises.push(d3.json(\"vaccination.json\"));\r\n      Promise.all(promises).then(function (values) {\r\n        //the Promise.all takes all the promises and return a single promise.\r\n        var world = values[0];\r\n        var data = values[1];\r\n        var clickname, clickdata;\r\n        //data = new Map(data.map(d1 => [d1.name,+d1.value]))\r\n        //   var countries = new Map(world.objects.countries.geometries.map(d1 => [d1.location,+d1.people_vaccinated/10000]))  //get the variable 'states' by creating a new Map object that map the us states' id with the properties. The states' id is the key, the states' properties is the matched value in the map.\r\n        //   console.log(countries)\r\n        //   var format = d3.format(',.0f')\r\n        //   console.log(format)\r\n        var width = 1400;\r\n        var height = 1000;\r\n        var projection = d3\r\n          .geoMercator()\r\n          .fitSize(\r\n            [width, height],\r\n            topojson.feature(world, world.objects.land)\r\n          );\r\n\r\n        var path = d3.geoPath().projection(projection);\r\n        var color = d3.scaleQuantize([0, 100], d3.schemeGreens[5]); //create a Quantize color scale based on the 9 colors of 'd3.schemeBlues' within the continuous domain: [1, 10].\r\n        //original line from Observable\r\n        //data = Object.assign(new Map(await d3.csv(\"unemployment.csv\", ({id, rate}) => [id, +rate])), {title: \"Unemployment rate (%)\"})\r\n        data = Object.assign(\r\n          new Map(\r\n            data.map((d2) => [\r\n              d2.location,\r\n              [+d2.vaccinated_rate, +d2.not_vaccinated_rate],\r\n            ])\r\n          )\r\n        ); // clone a map object that the data id is the key and the rate in the data is the matched value.\r\n        data.title = \"Total Covid19 Vaccinated Rate (%)\";\r\n        // const svg = d3.create(\"svg\")\r\n        var svg2 = d3\r\n          .select(\"#chloroplethmap\")\r\n          .attr(\"viewBox\", [0, 150, 1400, 800]);\r\n        //console.log(legend)\r\n        d3.select(\"#chloroplethmap\")\r\n          .append(\"g\")\r\n          .attr(\"transform\", \"translate(1000,5)\")\r\n          .style(\"font-size\", \"1.2em\")\r\n          .append(() => legend({ color, title: data.title, width: 360 }));\r\n\r\n        function pie(clickname, clickdata) {\r\n          //   var slice = {  //a slice of pie\r\n          //       innerRadius: 0,\r\n          //       outerRadius: 100,\r\n          //       startAngle: 0,\r\n          //       endAngle: Math.PI / 2\r\n          //   };\r\n          //   console.log(slice)\r\n          var labels = [\"People Vaccinated Rate\", \"People Not Vaccinated Rate\"];\r\n          var colors = [\"#1ea67d\", \"#81f0ce\"];\r\n          //console.log(d3.select('#piechart').style('width'))\r\n          var svg3 = d3.select(\"#piechart\").attr(\"viewBox\", `0 50 300 300`),\r\n            // width = 930,\r\n            // height = 930,\r\n\r\n            radius = Math.min(300, 300) / 4,\r\n            g = svg3\r\n              .append(\"g\")\r\n              .attr(\"transform\", \"translate(\" + 300 / 2 + \",\" + 300 / 2 + \")\");\r\n\r\n          var color = d3.scaleOrdinal().domain(labels).range(colors);\r\n\r\n          var pie = d3.pie().sort(null).sortValues(d3.descending);\r\n\r\n          var path = d3.arc().outerRadius(radius).innerRadius(0);\r\n\r\n          var label = d3\r\n            .arc()\r\n            .innerRadius(radius / 3)\r\n            .outerRadius(radius);\r\n\r\n          var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tool\");\r\n\r\n          var pie_format = d3.format(\".2~f\");\r\n          var arcs = g\r\n            .selectAll(\".arc\")\r\n            .data(pie(clickdata))\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"arc\")\r\n            .attr(\"stroke-width\", \"1.5\")\r\n            .attr(\"stroke\", \"\")\r\n            .on(\"mouseover\", function () {\r\n              d3.select(this)\r\n                .transition()\r\n                .attr(\"stroke-width\", \"1.5\")\r\n                .attr(\"stroke\", \"red\");\r\n              div.transition().style(\"opacity\", 0.1);\r\n            })\r\n            .on(\"mouseout\", function () {\r\n              d3.select(this)\r\n                .transition()\r\n                .attr(\"stroke-width\", \"1.5\")\r\n                .attr(\"stroke\", \"\");\r\n              div.transition().style(\"opacity\", 0);\r\n            });\r\n\r\n          arcs\r\n            .append(\"path\")\r\n            .attr(\"d\", path)\r\n            .attr(\"fill\", function (d, i) {\r\n              return color(i);\r\n            })\r\n            .append(\"title\")\r\n            .text((d, i) => `${labels[i]}：${pie_format(d.value)}%`);\r\n\r\n          svg3.selectAll(\"rect\").remove();\r\n          svg3.selectAll(\"text\").remove();\r\n\r\n          arcs\r\n            .append(\"text\")\r\n            .attr(\"transform\", function (d) {\r\n              return \"translate(\" + label.centroid(d) + \")\";\r\n            })\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"fill\", \"black\")\r\n            .style(\"font-size\", \"0.6em\")\r\n            .text(function (d) {\r\n              return pie_format(d.value) + \"%\";\r\n            });\r\n\r\n          //draw legend\r\n          //set legend of this chart\r\n          svg3\r\n            .append(\"rect\")\r\n            .style(\"fill\", colors[0])\r\n            .style(\"stroke\", colors[0])\r\n            .attr(\"x\", 20)\r\n            .attr(\"y\", 50)\r\n            .attr(\"width\", 10)\r\n            .attr(\"height\", 10);\r\n          svg3\r\n            .append(\"text\")\r\n            .attr(\"x\", 33)\r\n            .attr(\"y\", 57)\r\n            .text(labels[0])\r\n            .style(\"font-size\", \"0.5em\");\r\n          svg3\r\n            .append(\"rect\")\r\n            .style(\"fill\", colors[1])\r\n            .style(\"stroke\", colors[1])\r\n            .attr(\"x\", 150)\r\n            .attr(\"y\", 50)\r\n            .attr(\"width\", 10)\r\n            .attr(\"height\", 10);\r\n          svg3\r\n            .append(\"text\")\r\n            .attr(\"x\", 163)\r\n            .attr(\"y\", 57)\r\n            .text(labels[1])\r\n            .style(\"font-size\", \"0.5em\");\r\n\r\n          svg3\r\n            .append(\"text\")\r\n            .attr(\"x\", 40)\r\n            .attr(\"y\", 40)\r\n            .attr(\"fill\", \"red\")\r\n            .style(\"font-size\", \"0.6em\")\r\n            .text(clickname + \" Vaccinated Pie Chart:\");\r\n          //   svg3.append(\"text\")\r\n          //       .attr('x', 60)\r\n          //       .attr('y', 40)\r\n          //       .attr('fill', 'black')\r\n          //       .style('font-size', '0.3em')\r\n          //       .text('Info Covid-19 Pie Chart & Line Chart (One Country):');\r\n        }\r\n        function line(clickname) {\r\n          d3.json(\"totalcasedata.json\", (d) => {\r\n            return {\r\n              name: d.name,\r\n              date: d3.timeParse(\"%Y-%m-%d\")(d.date),\r\n              value: +d.value,\r\n            };\r\n          }).then((data) => {\r\n            //set margin\r\n            //console.log(data)\r\n            var margin = { top: 20, left: 100, bottom: 20, right: 100 },\r\n              width = 580 - margin.left - margin.right,\r\n              height = 280 - margin.top - margin.bottom;\r\n\r\n            d3.select(\"#linechart\").selectAll(\"*\").remove();\r\n            var svg4 = d3\r\n              .select(\"#linechart\")\r\n              .attr(\"viewBox\", `0 50 500 300`)\r\n              .append(\"g\")\r\n              .attr(\r\n                \"transform\",\r\n                \"translate(\" + margin.left + \", \" + margin.top + \")\"\r\n              );\r\n            //svg4.selectAll('*').remove()\r\n            function checkname(x) {\r\n              return x.name == clickname;\r\n            }\r\n            data = data.filter(checkname);\r\n            var all_val = data.map((d) => {\r\n              return { date: d.date, value: d.value };\r\n            });\r\n            //console.log(all_val)\r\n            var data_now = all_val; //us.objects.countries.geometries.map(d => [d.id, d.properties]))\r\n            //console.log(data_now)\r\n            // x axis scale\r\n            //console.log(d3.extent(data,function(d) {\r\n            //return d.date;\r\n            //}))\r\n            var x = d3\r\n              .scaleTime()\r\n              .domain([new Date(\"2020-01-01\"), new Date(\"2021-11-10\")])\r\n              .range([0, width]);\r\n            svg4\r\n              .append(\"g\")\r\n              .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n              .call(d3.axisBottom(x))\r\n              .attr(\"font-size\", \"0.85em\");\r\n\r\n            // y axis scale\r\n            var y = d3\r\n              .scaleLinear()\r\n              .domain([\r\n                0,\r\n                d3.max(data, function (d) {\r\n                  return +d.value;\r\n                }),\r\n              ])\r\n              .range([height, 0]);\r\n\r\n            svg4.append(\"g\").call(d3.axisLeft(y)).attr(\"font-size\", \"0.85em\");\r\n            //console.log(data_now)\r\n            //console.log(x(new Date(data_now[0].date)))\r\n            // create a new line generator\r\n            var line = d3\r\n              .line()\r\n              .x((d) => {\r\n                return x(new Date(d.date));\r\n              })\r\n              .y((d) => {\r\n                return y(+d.value);\r\n              });\r\n            //set colors\r\n            var color = \"purple\";\r\n\r\n            //draw lines in the svg\r\n            svg4\r\n              .append(\"path\")\r\n              .datum(data_now)\r\n              .attr(\"fill\", \"none\")\r\n              .attr(\"stroke\", color)\r\n              .attr(\"stroke-width\", 2)\r\n              .attr(\"d\", line);\r\n\r\n            //set legend of this chart\r\n            svg4\r\n              .append(\"rect\")\r\n              .style(\"fill\", color)\r\n              .style(\"stroke\", color)\r\n              .attr(\"x\", 6)\r\n              .attr(\"y\", -15)\r\n              .attr(\"width\", 15)\r\n              .attr(\"height\", 15);\r\n\r\n            svg4\r\n              .append(\"text\")\r\n              .attr(\"x\", 26)\r\n              .attr(\"y\", -4)\r\n              .style(\"font-size\", \"0.7em\")\r\n              .text(\"\" + clickname);\r\n\r\n            svg4\r\n              .append(\"text\")\r\n              .attr(\"x\", 180)\r\n              .attr(\"y\", 280)\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .style(\"font-size\", \"12px\")\r\n              .text(\" Date \");\r\n\r\n            svg4\r\n              .append(\"text\")\r\n              .attr(\"x\", -120)\r\n              .attr(\"y\", -90)\r\n              .attr(\"transform\", \"rotate(-90)\")\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .style(\"font-size\", \"12px\")\r\n              .text(\" Confirmed Number of People \");\r\n\r\n            svg4\r\n              .append(\"text\")\r\n              .attr(\"x\", 170)\r\n              .attr(\"y\", -30)\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .style(\"font-size\", \"0.85em\")\r\n              .text(\"  Covid-19 Line Chart (2020 - 2021) \");\r\n          });\r\n        }\r\n\r\n        pie(\"United States\", [68.06770576, 31.93229424]);\r\n        line(\"United States\");\r\n        svg2\r\n          .append(\"g\")\r\n          .selectAll(\"path\")\r\n          .data(topojson.feature(world, world.objects.countries).features) //join the converted data from TopoJSON to GeoJSON to the selected path by mapping based on id and rate\r\n          .join(\"path\")\r\n          .attr(\"fill\", (d) =>\r\n            data.has(d.properties.name)\r\n              ? color(data.get(d.properties.name)[0])\r\n              : \"#ccc\"\r\n          ) //fill the color of the path based on the data id and color scale\r\n          .attr(\"d\", path)\r\n          //set the text of the added title (set the tooltip)\r\n          .on(\"click\", function () {\r\n            svg2\r\n              .selectAll(\"path\")\r\n              .data(topojson.feature(world, world.objects.countries).features)\r\n              .attr(\"fill\", (d) =>\r\n                data.has(d.properties.name)\r\n                  ? color(data.get(d.properties.name)[0])\r\n                  : \"#ccc\"\r\n              );\r\n            d3.select(this).transition().attr(\"fill\", \"purple\");\r\n            //console.log(d3.select(this))\r\n            clickname =\r\n              d3.select(this)[\"_groups\"][0][0][\"__data__\"][\"properties\"][\r\n                \"name\"\r\n              ];\r\n            //console.log(data)\r\n            clickdata = data.get(clickname);\r\n            //console.log(clickdata)\r\n            pie(clickname, clickdata);\r\n            line(clickname);\r\n          })\r\n          .append(\"title\")\r\n          .text((d) => `${d.properties.name}`);\r\n\r\n        svg2\r\n          .append(\"path\")\r\n          .datum(\r\n            topojson.mesh(world, world.objects.countries, (a, b) => a !== b)\r\n          ) //add the path (geoPath) for the produced mesh of interior boundaries for all states to the svg\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", \"black\")\r\n          .attr(\"stroke-linejoin\", \"round\")\r\n          .attr(\"d\", path);\r\n      });\r\n    },\r\n  },\r\n  mounted: function () {\r\n    //console.log('mounted');\r\n    this.map();\r\n    this.bar();\r\n    this.map2();\r\n  },\r\n};\r\n</script>\r\n\r\n <style scoped>\r\n>>> body {\r\n  font-family: \"Lato\", sans-serif;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  color: #555;\r\n}\r\n>>> h1 {\r\n  padding: 10px;\r\n  border: 3px solid #777;\r\n  font-size: 1.8em;\r\n}\r\n>>> h2 {\r\n  padding: 0px;\r\n  margin: 0px 20px 0px 0px;\r\n  font-size: 1.5em;\r\n}\r\n>>> h3 {\r\n  padding: 0px;\r\n  margin: 40px 20px 20px 0px;\r\n  font-size: 1.2em;\r\n}\r\n>>> h4 {\r\n  padding: 0px;\r\n  margin: 20px 20px 20px 0px;\r\n  color: blue;\r\n  font-size: 1em;\r\n}\r\n>>> hr {\r\n  margin: 2px 0px 0px 0px;\r\n  height: 2px;\r\n  border-width: 0;\r\n  color: #bbb;\r\n  background-color: #bbb;\r\n}\r\n>>> .title {\r\n  display: block;\r\n  font-size: 0.8em;\r\n  font-style: italic;\r\n  color: black;\r\n  margin-bottom: 5px;\r\n  text-decoration: underline;\r\n}\r\n>>> .sample {\r\n  border: 2px dotted lightgrey;\r\n  padding: 10px;\r\n}\r\n>>> .answer {\r\n  border: 2px solid lightgrey;\r\n  margin: 20px 0px;\r\n  padding: 10px;\r\n}\r\n>>> .nb {\r\n  font-size: 0.75em;\r\n  color: #888;\r\n}\r\n>>> text {\r\n  font-family: Courier;\r\n  font-size: 0.75em;\r\n}\r\n>>> kbd {\r\n  font-family: monospace;\r\n}\r\n>>> .alert h1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin-top: 0;\r\n}\r\n>>> .alert {\r\n  background-color: rgb(248, 248, 248);\r\n  padding: 5px;\r\n  margin: 15px;\r\n  font-size: 0.85em;\r\n  color: #666;\r\n  text-align: left;\r\n  display: inline-block;\r\n}\r\n>>> .info {\r\n  background-color: rgb(243, 248, 250);\r\n}\r\n>>> .warning {\r\n  background-color: rgb(253, 248, 243);\r\n}\r\n>>> .danger {\r\n  background-color: rgb(254, 246, 246);\r\n}\r\n>>> .container {\r\n  display: flex;\r\n}\r\n>>> .col {\r\n  flex: 1;\r\n}\r\n>>> .col-2 {\r\n  flex: 2;\r\n}\r\n>>> .col-3 {\r\n  flex: 3;\r\n}\r\n>>> .col-4 {\r\n  flex: 3;\r\n}\r\n>>> pre {\r\n  tab-size: 2;\r\n}\r\n>>> .countries {\r\n  fill: whitesmoke;\r\n}\r\n>>> .countries :hover {\r\n  fill: red;\r\n}\r\n>>> .country-borders {\r\n  fill: none;\r\n  stroke: black;\r\n  stroke-width: 0.5px;\r\n  stroke-linejoin: round;\r\n  stroke-linecap: round;\r\n  pointer-events: none;\r\n}\r\n>>> .legend {\r\n  background-color: rgb(194, 196, 197);\r\n  padding: 3px;\r\n  position: absolute;\r\n  left: 30px;\r\n  width: 220px;\r\n}\r\n\r\n>>> .legend div span {\r\n  display: inline-block;\r\n  height: 10px;\r\n  margin-right: 3px;\r\n  width: 10px;\r\n}\r\n</style>\r\n\r\n<style scoped>\r\n>>> .axis path,\r\n>>> .axis line {\r\n  fill: none;\r\n  stroke: black;\r\n  shape-rendering: crispEdges;\r\n}\r\n>>> .axis text {\r\n  font-family: Courier;\r\n  font-size: 1.2em;\r\n}\r\n>>> div.commands {\r\n  font-family: Courier;\r\n  font-size: 0.85em;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  cursor: default;\r\n  user-select: none;\r\n}\r\n>>> svg {\r\n  display: block;\r\n  margin: auto;\r\n  background-color: white;\r\n}\r\n>>> .bar {\r\n  fill: rgb(178, 78, 32);\r\n}\r\n>>> text.xlabel {\r\n  text-anchor: middle;\r\n}\r\n>>> text.ylabel {\r\n  text-anchor: middle;\r\n  alignment-baseline: central;\r\n}\r\n>>> text.name {\r\n  font-weight: bold;\r\n  text-anchor: middle;\r\n  font-size: 1em;\r\n  alignment-baseline: central;\r\n}\r\n>>> .sort {\r\n  border-radius: 3px;\r\n  background-color: #eee;\r\n  display: inline-block;\r\n  cursor: default;\r\n}\r\n>>> .sort,\r\n>>> label {\r\n  font-family: Courier;\r\n  color: #444;\r\n  padding: 5px;\r\n  margin: 5px;\r\n}\r\n>>> label {\r\n  vertical-align: text-bottom;\r\n}\r\n>>> .filter {\r\n  border-radius: 3px;\r\n  background-color: #eee;\r\n  padding: 5px;\r\n  margin: 5px;\r\n  color: #444;\r\n  text-align: left;\r\n  display: inline-block;\r\n  cursor: default;\r\n}\r\n>>> div.tool {\r\n  position: absolute;\r\n  opacity: 1;\r\n  background: white;\r\n  color: red;\r\n  pointer-events: none;\r\n  font-size: 14px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Health.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Health.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Health.vue?vue&type=template&id=f1bdbc32&scoped=true&\"\nimport script from \"./Health.vue?vue&type=script&lang=js&\"\nexport * from \"./Health.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Health.vue?vue&type=style&index=0&id=f1bdbc32&scoped=true&lang=css&\"\nimport style1 from \"./Health.vue?vue&type=style&index=1&id=f1bdbc32&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"f1bdbc32\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Health.vue?vue&type=style&index=0&id=f1bdbc32&scoped=true&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Health.vue?vue&type=style&index=1&id=f1bdbc32&scoped=true&lang=css&\""],"sourceRoot":""}